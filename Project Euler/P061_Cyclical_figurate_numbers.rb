# Problem Statement
# Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers
# are all figurate (polygonal) numbers and are generated by the following formulae:
# Triangle 	  	  P3,n=n(n+1)/2 	 	1, 3,  6, 10, 15, ...
# Square 	  	    P4,n=n2 	  	    1, 4,  9, 16, 25, ...
# Pentagonal 	  	P5,n=n(3n−1)/2 	 	1, 5, 12, 22, 35, ...
# Hexagonal 	  	P6,n=n(2n−1) 	  	1, 6, 15, 28, 45, ...
# Heptagonal 	  	P7,n=n(5n−3)/2   	1, 7, 18, 34, 55, ...
# Octagonal 	  	P8,n=n(3n−2) 	  	1, 8, 21, 40, 65, ...

# The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting properties.

# The set is cyclic, in that the last two digits of each number
# is the first two digits of the next number (including the last number with the first).
# Each polygonal type: triangle (P3,127=8128), square (P4,91=8281),
# and pentagonal (P5,44=2882), is represented by a different number in the set.
# This is the only set of 4-digit numbers with this property.

# Find the sum of the only ordered set of six cyclic 4-digit numbers
# for which each polygonal type: triangle, square, pentagonal, hexagonal,
# heptagonal, and octagonal, is represented by a different number in the set.

require_relative 'euler'
include Euler

require_relative 'formulae_polygonal'
include FormulaePolygonal

def generate_n_digit_polynomial_array(func, n)
  # Receives a function
  arr = []

  (1..).each do |num|
    computed = method(func).call(num)

    break if computed.to_s.length > n
    next if computed.to_s.length < n
    next if computed.to_s[-2] == '0' # E.g. 3003 is discarded since its cyclic equiv is 03xx

    arr << computed
  end

  arr
end

def main
  start_time = Process.clock_gettime(Process::CLOCK_MONOTONIC)

  # Generate numbers
  all = {
    3 => generate_n_digit_polynomial_array(:triangle_number, 4),
    4 => generate_n_digit_polynomial_array(:square_number, 4),
    5 => generate_n_digit_polynomial_array(:pentagonal_number, 4),
    6 => generate_n_digit_polynomial_array(:hexagonal_number, 4),
    7 => generate_n_digit_polynomial_array(:heptagonal_number, 4),
    8 => generate_n_digit_polynomial_array(:octagonal_number, 4)
  }

  finish_time = Process.clock_gettime(Process::CLOCK_MONOTONIC)
  @runtime = finish_time - start_time
  puts "Problem computed in #{@runtime}s"
end

main
