# Problem Statement:
# The sequence of triangle numbers is generated by adding the natural numbers. 
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
# The first ten terms would be:
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
# Let us list the factors of the first seven triangle numbers:

#      1: 1
#      3: 1,3
#      6: 1,2,3,6
#     10: 1,2,5,10
#     15: 1,3,5,15
#     21: 1,3,7,21
#     28: 1,2,4,7,14,28

# We can see that 28 is the first triangle number to have over five divisors.
# What is the value of the first triangle number to have over five hundred divisors?
def generate_triangle_number(n)
  (1..n).reduce(0) {|acc, num| acc + num}
  # equivalent to summation formula n(n+1)/2
end

def prime_factorization(num)
  # From Problem 3
  factors = []
  counter = 2
  quotient = num

  while quotient != 1
    if quotient % counter == 0 # If evenly divides
      factors << counter # save counter
      quotient /= counter
    else
      counter += 1
    end
  end

  factors
end

def count_number_of_factors(num)
  factor_list = prime_factorization(num)
  # If num turned into a product of prime numbers by prime factorization, we can represent it as:
  # N = X**a × Y**b × Z**c
  # Where X, Y and Z are the prime numbers and a, b and c are their respective powers.
  # Formula to find numbe of factors is:
  # Total Number of Factors for N = (a+1) (b+1) (c+1) ...
  hash = factor_list.reduce(Hash.new(0)) {|hsh, num|
    hsh[num] += 1
    hsh
  }
  factor_count = hash.values.reduce(1) {|product, exponent| product * (exponent +1)}
end

def main
  start_time = Process.clock_gettime(Process::CLOCK_MONOTONIC)
  
  answer = 0
  counter = 8 # starting triangular number term to test

  while answer == 0
    triangular_number = generate_triangle_number(counter)
    no_of_factors = count_number_of_factors(triangular_number)
    answer = triangular_number if no_of_factors > 500
    p "#{counter}, #{no_of_factors}"# see progress

    counter += 1
  end

  p "The value of the first triangular number to have over 500 divisors is #{answer}"

  finish_time = Process.clock_gettime(Process::CLOCK_MONOTONIC)
  @runtime = finish_time - start_time
  puts "Problem computed in #{@runtime}s"
end

main
# 76576500
# 6.6479374320001625s